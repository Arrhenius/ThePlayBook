This is a simple text file where I will display my thoughts on the design of the software,
design ideas, and anything else I may come up with that I want to be in the software. 
Realistically I should rename this file to "blog.txt" but for now I'll keep it as is.


Goal:
	To be able to create simple plays of a strategy that will be played out
	in a Counter Strike Global Offensive match. To be able to share new ideas on
	a canvas using paint like tools and predefined buttons. You can save a variety
	of these plays and create your own playbook for your team.

	Initial goals will be:
		-able to try and read in an image of the map that displays it on a canvas.
		-Login to an account
		-Be able to draw on the canvas
		-save that 


---Development Decisions Made While Working On Tool---

I spent a great deal of time programming in C because of college so transitioning
from C to C++ has been an interesting hurdle because it is so easy for me to just
write C just out of habit. My style might deviate from time to time simply because
I am still trying to adjust to a pure C++ convention. For now my objective is to have
a more orthodox approach to my C++ style. As time progresses this will probably change
but I find it easier to read this style of code than more modern C++. And some of my
decisions are probably just based on ignorance that I'll fix as I learn more about 
the language.



---Discoveries---

I've always been used to zeroing out memory when working with C but when approaching
my current problems with this approach I discovered using functions such as memset()
didn't seem to provide the same result as I would expect it to in C. This discovery
came when trying to clear form data on a menu. It appeared that if I tried to memset()
the menu by doing

	memset(this, 0, sizeof(this));

or even

	memset(this, 0, sizeof(*this));

The end result was the memory was not clearing. And this posed a problem. I had already
taken the time to implement the function in a variety of places within the program
with the understanding that the function would generate the result I was used to but it appeared
it was doing absolutely nothing of the sort. Countless Google searches later and
the solutions became even more bizzare. For something as simple as clearing memory
solutions got so complex that I simply could not believe they were actual solutions.
Complex templates that were daunting to read, creating a class to manage classes that
need their memory cleared, a long explanation of the standard and what it does but ending
that explanation with "but honestly, I don't know," and the list went on. So I did my
own detective work. Since I'm using ImGui, I can see things update instantly. So I went to work.

This is what I discovered:

When an instance of an object exists, it is completely removed from memory by calling

	memset(this, 0, sizeof(*the object we are referring to*))

For sizeof I actually put the name of the class in there and it appears that
completely removes it from memory, closes that menu and in order to open it I have to 
reenable it. Same thing for this memset

	memset(this, 0, sizeof(*this));


These seemed to cause a problem. If I actually applied the 2nd example to the constructor
of my menu class I had reduced frame rate to my program and overall poor performance because of it.
Because we are within a game loop, it is safe to say this class is probably being destroyed
and created over and over. But what I found interesting was the class was persisting no matter how
much it was destroyed. The data that was supposed to be cleared never was being cleared. This lead 
me to the discovery that C++ is probably adding bookkeeping data to the class and extra bloat 
that I'm currently ignorant of. 


Whatever the real reason for all this was, it didn't matter, this method wasn't going to work for me. 

So my approach to this problem was to memset any POD types and explicitly initialize anything else.
This worked. Instantly. Everything was behaving correctly and was generating the result I was looking
for originally. This pretty much confirmed to me that there is underlying C++ work that manages any
instances of classes.

TL,DR; I don't know how C++ works yet.


Date: 3-30-22

It is safe to say that I have been busy and my ability to continue this project has been stalled
a bit. Job interviews and preparation for them plus the inevitable feeling of imposter syndrome
that I seem to always encounter when taking on something bigger than I'm used to always tends to
find a way to discourage me in life from doing things that I should be able to do with ease.

Due to the size of the project there appears to be certain things that I failed to think of
before embarking on the journey of creating this tool. What appeared to be a simple program
that I felt would be fairly straight forward was actually becoming a Herculean task quickly
over the night. Things that seemed trivial before like file saving were becoming a much more
complex task because the type of data and how I was to handle it was no longer trivial. That being
said, my timeline for completion is unknown but am aiming to complete this within at least another
month since I should find an opportunity here very soon to complete things. Other than that, there
is really not much to say, things take time, I have none, so I'll work with what I got. Be patient 
my friends, it is coming.


-----------------------------------------------------------------------------------------------------

Date: 10-24-22

This is more of a blog/dev update for myself or others should anyone even bother reading this.
I happened to fumble upon some free time and should hopefully be finishing up a good chunk of
this within the next couple of weeks. Holidays I'll be working a lot and focusing on just writing
a whole bunch of code. So if there are people out there interested in this tool, I think I'll be
closer to finishing (a very vague term in reality) this tool than I have in the past. I will
be pushing to finish this soon because I've become interested in finishing it more than ever. 
Be patient my friends
